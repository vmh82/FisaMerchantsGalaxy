package com.fisa.galaxy.negocio.Impl;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fisa.galaxy.Alfabeto.Guia;
import com.fisa.galaxy.constantes.ConstantesGalaxy;
import com.fisa.galaxy.negocio.IConvertidor;
import com.fisa.galaxy.negocio.IProcesador;

public class ProcesadorImpl implements IProcesador {

	private List<Guia> instrucciones;
	private Map<String, String> transaccionEnNumerosRomanos;
	private Map<String, Double> transaccionDeUnidadACreditos;
	private IConvertidor convertidor;
	
	public ProcesadorImpl() {
		this.instrucciones = new ArrayList<Guia>();
		convertidor = new ConvertidorImpl();
		transaccionEnNumerosRomanos =  new HashMap<String, String>();
		transaccionDeUnidadACreditos =  new HashMap<String, Double>();
	}
	
	
	@Override
	public void leerInstrucciones() {
		FileInputStream fstream;
		try {
			fstream = new FileInputStream(ConstantesGalaxy.ARCHIVO_INSTRUCCIONES_CONVERSION);
			BufferedReader readerArchivo = new BufferedReader(new InputStreamReader(fstream));
			String linea;
			while((linea = readerArchivo.readLine()) != null){
				if(linea.isEmpty()){
	    			break;
	    		}else{
	    			this.instrucciones.add(new Guia(linea));
	    		}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void procesarInstrucciones() {
		for(Guia instruccion : this.instrucciones) {
			switch(instruccion.obtenerTipoInstruccion()) {
			case ROMANOS:
				actualizarTransaccionEnNumerosRomanos(instruccion);
				break;
			case CREDITOS :
				actualizarTransaccionDeUnidadesACreditos(instruccion);
				break;
			case INSTRUCCION_HOW_MUCH :
				handleHowMuchQuery(instruccion);
				break;
			case INSTRUCCION_HOW_MANY :
				handleHowManyQuery(instruccion);
				break;
			default :
				handleInvalidSentence();
				break;					
			}
		}
		
	}
	
	private void actualizarTransaccionEnNumerosRomanos(Guia token) {
		transaccionEnNumerosRomanos.put(token.getInstrucciones()[0], token.getInstrucciones()[2]);
	}
	
	private void actualizarTransaccionDeUnidadesACreditos(Guia instruccion) {
		StringBuilder romanNumberBuilder = new StringBuilder();
		String unidadIntergalactica = "";
		int creditos = -1;
		for(String token : instruccion.getInstrucciones()){
			if (!token.equals("is") && !token.equals("Credits")){
				String romanLetter = transaccionEnNumerosRomanos.get(token);
				if (romanLetter != null){
					romanNumberBuilder.append(romanLetter);
				} else if (unidadIntergalactica.isEmpty()){
					unidadIntergalactica = token;
				} else{
					creditos = Integer.parseInt(token);
				}
			}
		}
		int romanIntValue = convertidor.romanoADecimal(romanNumberBuilder.toString());
		double valueOfIntergalaticUnit = (double) creditos/romanIntValue;
		transaccionDeUnidadACreditos.put(unidadIntergalactica, valueOfIntergalaticUnit);
	}
	
	private void handleHowMuchQuery(Guia instruccion) {
		StringBuilder romanNumberBuilder = new StringBuilder();
		StringBuilder intergalaticAnswerHowMuchBuilder = new StringBuilder();
		for(int i=3; i < instruccion.getInstrucciones().length-1; i++){
			String romanLetter = transaccionEnNumerosRomanos.get(instruccion.getInstrucciones()[i]);
			if (romanLetter != null){
				//found the word in the intergalatic Roman map
				romanNumberBuilder.append(romanLetter);
				intergalaticAnswerHowMuchBuilder.append(instruccion.getInstrucciones()[i] + " ");
			}else{
				//error - word not found
				handleInvalidSentence();
				return;
			}
		}
		int romanIntValue = convertidor.romanoADecimal(romanNumberBuilder.toString());
		intergalaticAnswerHowMuchBuilder.append("is " + romanIntValue);
		System.out.println(intergalaticAnswerHowMuchBuilder.toString());
	}
	
	private void handleHowManyQuery(Guia instruccion) {
		double intergalaticCredits = 1;
		StringBuilder romanNumberBuilder = new StringBuilder();
		StringBuilder intergalaticAnswerHowManyBuilder = new StringBuilder();
		for(int i=4; i < instruccion.getInstrucciones().length-1; i++){
			String romanLetter = transaccionEnNumerosRomanos.get(instruccion.getInstrucciones()[i]);
			if (romanLetter != null){
				//found the word in the intergalatic Roman map
				romanNumberBuilder.append(romanLetter);
				intergalaticAnswerHowManyBuilder.append(instruccion.getInstrucciones()[i] + " ");
			}else if (transaccionDeUnidadACreditos.containsKey(instruccion.getInstrucciones()[i])){
				//found the word in the intergalatic unit credits map
				intergalaticCredits = transaccionDeUnidadACreditos.get(instruccion.getInstrucciones()[i]);
				intergalaticAnswerHowManyBuilder.append(instruccion.getInstrucciones()[i] + " ");				
			}else{
				//error - word not found
				handleInvalidSentence();
				return;
			}
		}
		int romanIntValue = convertidor.romanoADecimal(romanNumberBuilder.toString());
		Double creditsAnswer = new Double(romanIntValue * intergalaticCredits);
		intergalaticAnswerHowManyBuilder.append("is " + creditsAnswer.intValue() + " Credits");		
		System.out.println(intergalaticAnswerHowManyBuilder.toString());
	}
	
	private void handleInvalidSentence() {
		System.out.println("xx");		
	}


	public List<Guia> getInstrucciones() {
		return instrucciones;
	}


	public void setInstrucciones(List<Guia> instrucciones) {
		this.instrucciones = instrucciones;
	}


	public Map<String, String> getTransaccionEnNumerosRomanos() {
		return transaccionEnNumerosRomanos;
	}


	public void setTransaccionEnNumerosRomanos(Map<String, String> transaccionEnNumerosRomanos) {
		this.transaccionEnNumerosRomanos = transaccionEnNumerosRomanos;
	}


	public Map<String, Double> getTransaccionDeUnidadACreditos() {
		return transaccionDeUnidadACreditos;
	}


	public void setTransaccionDeUnidadACreditos(Map<String, Double> transaccionDeUnidadACreditos) {
		this.transaccionDeUnidadACreditos = transaccionDeUnidadACreditos;
	}


	public IConvertidor getConvertidor() {
		return convertidor;
	}


	public void setConvertidor(IConvertidor convertidor) {
		this.convertidor = convertidor;
	}
}
