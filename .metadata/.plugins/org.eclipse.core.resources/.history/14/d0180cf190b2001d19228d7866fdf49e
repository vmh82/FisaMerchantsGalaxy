package com.fisa.galaxy.negocio.Impl;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fisa.galaxy.Alfabeto.Guia;
import com.fisa.galaxy.constantes.ConstantesGalaxy;
import com.fisa.galaxy.negocio.IConvertidor;
import com.fisa.galaxy.negocio.IProcesador;
import com.fisa.galaxy.negocio.ITransacciones;

public class ProcesadorImpl implements IProcesador, ITransacciones {

	private List<Guia> instrucciones;

	public ProcesadorImpl() {
		this.instrucciones = new ArrayList<Guia>();
		
	}
	
	
	@Override
	public void leerInstrucciones() {
		FileInputStream fstream;
		try {
			fstream = new FileInputStream(ConstantesGalaxy.ARCHIVO_INSTRUCCIONES_CONVERSION);
			BufferedReader readerArchivo = new BufferedReader(new InputStreamReader(fstream));
			String linea;
			while((linea = readerArchivo.readLine()) != null){
				if(linea.isEmpty()){
	    			break;
	    		}else{
	    			this.instrucciones.add(new Guia(linea));
	    		}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void procesarInstrucciones() {
		for(Guia instruccion : this.instrucciones) {
			switch(instruccion.obtenerTipoInstruccion()) {
			case ROMANOS:
				actualizarTransaccionEnNumerosRomanos(instruccion);
				break;
			case CREDITOS :
				actualizarTransaccionDeUnidadesACreditos(instruccion);
				break;
			case INSTRUCCION_HOW_MUCH :
				ResolverInstruccionHowMuch(instruccion);
				break;
			case INSTRUCCION_HOW_MANY :
				handleHowManyQuery(instruccion);
				break;
			default :
				handleInvalidSentence();
				break;					
			}
		}
		
	}


	@Override
	public void actualizarTransaccionEnNumerosRomanos(Guia instruccion) {
		transaccionEnNumerosRomanos.put(instruccion.getInstrucciones()[0], instruccion.getInstrucciones()[2]);
	}


	@Override
	public void actualizarTransaccionDeUnidadesACreditos(Guia instruccion) {
		StringBuilder romanNumberBuilder = new StringBuilder();
		String unidadIntergalactica = "";
		int creditos = -1;
		for(String token : instruccion.getInstrucciones()){
			if (!token.equals("is") && !token.equals("Credits")){
				String romanLetter = transaccionEnNumerosRomanos.get(token);
				if (romanLetter != null){
					romanNumberBuilder.append(romanLetter);
				} else if (unidadIntergalactica.isEmpty()){
					unidadIntergalactica = token;
				} else{
					creditos = Integer.parseInt(token);
				}
			}
		}
		int romanIntValue = convertidor.romanoADecimal(romanNumberBuilder.toString());
		double valueOfIntergalaticUnit = (double) creditos/romanIntValue;
		transaccionDeUnidadACreditos.put(unidadIntergalactica, valueOfIntergalaticUnit);

	}


	@Override
	public void crearTransaccionHowMuch(Guia instruccion) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void crearTransaccionHowMany(Guia instruccion) {
		// TODO Auto-generated method stub
		
	}
	
	
}
