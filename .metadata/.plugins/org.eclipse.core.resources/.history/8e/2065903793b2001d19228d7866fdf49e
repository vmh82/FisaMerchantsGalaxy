package com.fisa.galaxy.negocio.Impl;

import java.util.HashMap;
import java.util.Map;
import com.fisa.galaxy.Alfabeto.Guia;
import com.fisa.galaxy.constantes.ConstantesGalaxy;
import com.fisa.galaxy.negocio.IConvertidor;
import com.fisa.galaxy.negocio.ITransacciones;

public class TransaccionesImpl implements ITransacciones{
	
	private Map<String, String> transaccionEnNumerosRomanos;
	private Map<String, Double> transaccionDeUnidadACreditos;
	private IConvertidor convertidor;

	public TransaccionesImpl() {
		convertidor = new ConvertidorImpl();
		transaccionEnNumerosRomanos =  new HashMap<String, String>();
		transaccionDeUnidadACreditos =  new HashMap<String, Double>();
	}
	
	@Override
	public void actualizarTransaccionEnNumerosRomanos(Guia instruccion) {
		transaccionEnNumerosRomanos.put(instruccion.getInstrucciones()[0], instruccion.getInstrucciones()[2]);
		
	}

	@Override
	public void actualizarTransaccionDeUnidadesACreditos(Guia instruccion) {
		StringBuilder numerosRomanosBuilder = new StringBuilder();
		String unidadIntergalactica = "";
		int creditos = -1;
		for(String token : instruccion.getInstrucciones()){
			if (!token.equals(ConstantesGalaxy.TOKEN_IS) && !token.equals(ConstantesGalaxy.TOKEN_CREDITS)){
				String caracterRomano = transaccionEnNumerosRomanos.get(token);
				if (caracterRomano != null){
					numerosRomanosBuilder.append(caracterRomano);
				} else if (unidadIntergalactica.isEmpty()){
					unidadIntergalactica = token;
				} else{
					creditos = Integer.parseInt(token);
				}
			}
		}
		int valorNumericoRomano = convertidor.romanoADecimal(numerosRomanosBuilder.toString());
		double valorUnidadIntergalactica = (double) creditos/valorNumericoRomano;
		transaccionDeUnidadACreditos.put(unidadIntergalactica, valorUnidadIntergalactica);
		
	}

	@Override
	public void crearTransaccionHowMuch(Guia instruccion) {
		StringBuilder numerosRomanosBuilder = new StringBuilder();
		StringBuilder unidadIntergalactica = new StringBuilder();
		for(int i=3; i < instruccion.getInstrucciones().length-1; i++){
			String romanLetter = transaccionEnNumerosRomanos.get(instruccion.getInstrucciones()[i]);
			if (romanLetter != null){
				numerosRomanosBuilder.append(romanLetter);
				unidadIntergalactica.append(instruccion.getInstrucciones()[i] + " ");
			}else{
				
				crearTransaccionNoValida();
				return;
			}
		}
		int valorNumericoRomano = convertidor.romanoADecimal(numerosRomanosBuilder.toString());
		unidadIntergalactica.append(ConstantesGalaxy.TOKEN_IS + " "+ valorNumericoRomano);
		System.out.println(unidadIntergalactica.toString());
		
	}

	@Override
	public void crearTransaccionHowMany(Guia instruccion) {
		double creditosIntergalacticos = 1;
		StringBuilder romanNumberBuilder = new StringBuilder();
		StringBuilder intergalaticAnswerHowManyBuilder = new StringBuilder();
		for(int i=4; i < instruccion.getInstrucciones().length-1; i++){
			String romanLetter = transaccionEnNumerosRomanos.get(instruccion.getInstrucciones()[i]);
			if (romanLetter != null){
				//found the word in the intergalatic Roman map
				romanNumberBuilder.append(romanLetter);
				intergalaticAnswerHowManyBuilder.append(instruccion.getInstrucciones()[i] + " ");
			}else if (transaccionDeUnidadACreditos.containsKey(instruccion.getInstrucciones()[i])){
				//found the word in the intergalatic unit credits map
				intergalaticCredits = transaccionDeUnidadACreditos.get(instruccion.getInstrucciones()[i]);
				intergalaticAnswerHowManyBuilder.append(instruccion.getInstrucciones()[i] + " ");				
			}else{
				//error - word not found
				crearTransaccionNoValida();
				return;
			}
		}
		int romanIntValue = convertidor.romanoADecimal(romanNumberBuilder.toString());
		Double creditsAnswer = new Double(romanIntValue * intergalaticCredits);
		intergalaticAnswerHowManyBuilder.append("is " + creditsAnswer.intValue() + " Credits");		
		System.out.println(intergalaticAnswerHowManyBuilder.toString());
	}
	
	public void crearTransaccionNoValida() {
		System.out.println(ConstantesGalaxy.TRANSACCION_NO_VALIDA);		
	}


	public Map<String, String> getTransaccionEnNumerosRomanos() {
		return transaccionEnNumerosRomanos;
	}


	public void setTransaccionEnNumerosRomanos(Map<String, String> transaccionEnNumerosRomanos) {
		this.transaccionEnNumerosRomanos = transaccionEnNumerosRomanos;
	}


	public Map<String, Double> getTransaccionDeUnidadACreditos() {
		return transaccionDeUnidadACreditos;
	}


	public void setTransaccionDeUnidadACreditos(Map<String, Double> transaccionDeUnidadACreditos) {
		this.transaccionDeUnidadACreditos = transaccionDeUnidadACreditos;
	}


	public IConvertidor getConvertidor() {
		return convertidor;
	}


	public void setConvertidor(IConvertidor convertidor) {
		this.convertidor = convertidor;
	}

}
